@page "/userSetting"
@inherits vsWork.Shared.BasePage
@using Fluxor
@using vsWork.Features.UserSetting.Store
@using vsWork.Shared

<Container Fluid="true">
    <EditForm Model="@settingUser" OnValidSubmit="OnClickRegist">
        <FluentValidationValidator @ref="fluentValidationValidator " />
        <DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
        <div class="form-group">
            <label for="id">UserID(3文字以上100文字以下)</label>
            <input type="text" name="id" @bind-value="settingUser.UserId" disabled=@(UserSettingState.Value.Mode==UserSettingMode.Update) maxlength="100" class="form-control" />
        </div>
        <div class="form-group">
            <label for="id">UserName(3文字以上100文字以下)</label>
            <input type="text" name="id" @bind-value="settingUser.UserName" maxlength="100" class="form-control" />
        </div>
        <div class="form-group">
            <label for="pass">Password(3文字以上100文字以下)</label>
            <input type="password" name="pass" @bind-value="settingUser.Password" maxlength="100" class="form-control" />
        </div>
        <button class="btn btn-primary" type="submit">登録</button>

    </EditForm>
</Container>

@code {
    [Inject]
    private IState<UserSettingState> UserSettingState { get; set; }

    private User settingUser = new User();
    protected override void OnInitialized()
    {
        settingUser = Utility.DeepCopy(UserSettingState.Value.SelectedUser);
        base.OnInitialized();
    }

    private async Task OnClickRegist()
    {
        Dispatcher.Dispatch(new UserSettingSettingUserAction(settingUser));
    }
}
