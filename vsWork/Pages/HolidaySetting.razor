@page "/holidaySetting"
@inherits vsWork.Shared.BasePage
@implements IDisposable
@using Fluxor
@using vsWork.Stores
@using vsWork.Shared
@using vsWork.Utils

<EditForm Model="@settingData" OnValidSubmit="OnClickRegist">
    <FluentValidationValidator @ref="fluentValidationValidator " />
    <DataAnnotationsValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
    <div class="form-group">
        <label for="id">Date</label>
        <input type="date" name="id" disabled="@(SettingState.Value.Mode != SettingMode.Add)" @bind-value="settingData.Date" class="form-control" />
    </div>
    <div class="form-group">
        <label for="id">HolidayName</label>
        <input type="text" name="id" @bind-value="settingData.Name" maxlength="100" class="form-control" />
    </div>
    <div class="form-group">
        <label for="rating">種別</label>
        <InputSelect class="form-control" @bind-Value="settingData.HolidayType">
            @foreach (HolidayType item in Enum.GetValues(typeof(HolidayType)))
            {
                <option value="@item">@(EnumTextAttribute.GetText(item))</option>
            }
        </InputSelect>
    </div>
    <button class="btn btn-primary" type="submit">設定</button>
    <button class="btn btn-secondary" type="button" @onclick="OnClickReturn">戻る</button>

</EditForm>

@code {
    [Inject]
    private IState<HolidaySettingState> SettingState { get; set; }

    private Holiday settingData = new Holiday { Date = DateTime.Now };
    protected override void OnInitialized()
    {
        settingData = SettingState.Value.SelectedHoliday;
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();
    }
    private async Task OnClickRegist()
    {
        Dispatcher.Dispatch(new HolidaySettingAction(settingData));
    }
    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var returnUrl = Navigation!.ToBaseRelativePath(e.Location);
        if (returnUrl != "holidayList")
        {
            Dispatcher.Dispatch(new ClearHolidayStateAction());
        }
    }
    private async Task OnClickReturn()
    {
        Dispatcher.Dispatch(new HolidaySettingReturnAction());
    }
    void IDisposable.Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }
}
