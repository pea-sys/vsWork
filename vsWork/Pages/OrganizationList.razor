@page "/organizationList"
@inherits vsWork.Shared.BasePage
@implements IDisposable
@using Fluxor
@using vsWork.Stores
@using BlazorPagination

@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataGrid TItem="Organization"
              Data=@(SettingState.Value.OrganizationList.Skip((currentPage - 1)*maxRow).Take(maxRow).ToArray())
              @bind-SelectedRow="@_selectedData" PageSize=@maxRow>
        <DataGridColumn TItem="Organization" Field="@nameof(Organization.OrganizationId)" Caption="組織ID" Sortable="false" />
        <DataGridColumn TItem="Organization" Field="@nameof(Organization.OrganizationName)" Caption="組織名称" Editable="true" />
    </DataGrid>

    <BlazorPager CurrentPage="@currentPage"
                 PageCount="@pageCount"
                 OnPageChanged="(async e => { OnPageChanged(e);})"
                 ShowFirstLast="true"
                 ShowPageNumbers="true"
                 VisiblePages="5"
                 FirstText="&laquo;"
                 LastText="&raquo;"
                 NextText="&rsaquo;"
                 PreviousText="&lsaquo;" />

    <Button Color="Color.Primary" @onclick="@(OnClickAddButton)">新規登録</Button>
    <Button Color="Color.Secondary" Disabled="@(_selectedData == null)" @onclick="@(OnClickUpdateButton)">更新</Button>
    <Button Color="Color.Danger" Disabled="@((_selectedData == null) || (CurrentState.Value.User.OrganizationId == _selectedData.OrganizationId))" @onclick="@(OnClickDeleteButton)">削除</Button>
}

@code {
    // TODO:ページネーションで末尾のページネーションコンポーネントの位置がずれる
    // TODO:ページコンポーネントとボタンを横並びにしたい

    [Inject]
    private IState<OrganizationSettingState> SettingState { get; set; }
    [Inject]
    private IRepository<User,string> UserRepositoryService { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private const int maxRow = 7;
    private int pageCount;
    private int currentPage = 1;

    private Organization _selectedData;
    private bool _loading => SettingState.Value.Loading;

    protected override void OnInitialized()
    {
        if (SettingState.Value.Initialized == false)
        {
            Dispatcher.Dispatch(new LoadOrganizationsAction());
        }
        pageCount = (int)Math.Ceiling((SettingState.Value.OrganizationList.Length / maxRow) + 0.5);
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();
    }
    private void OnPageChanged(int e)
    {
        currentPage = e;
        StateHasChanged();
    }
    private async Task OnClickAddButton()
    {
        Dispatcher.Dispatch(new OrganizationSettingBeginAction(new Organization(), SettingMode.Add));
    }
    private async Task OnClickUpdateButton()
    {
        Dispatcher.Dispatch(new OrganizationSettingBeginAction(_selectedData, SettingMode.Update));
    }
    private async Task OnClickDeleteButton()
    {
        int userCount = ((UserRepository)UserRepositoryService).GetUserCountByOrganizationId(_selectedData.OrganizationId);
        var parameters = new ModalParameters();
        parameters.Add(nameof(ModalDisplay.Message), "所属員が" + userCount + "名います" + Environment.NewLine  +_selectedData.OrganizationName + "を削除しますか？");
        parameters.Add(nameof(ModalDisplay.DispType), ModalDisplay.EnumDispType.YesOrNo);
        var options = new ModalOptions { HideCloseButton = true };
        var messageForm = Modal.Show<ModalDisplay>("確認", parameters, options);
        var result = await messageForm.Result;
        if (!result.Cancelled)
        {
            Dispatcher.Dispatch(new OrganizationSettingBeginAction(_selectedData, SettingMode.Delete));
        }
    }
    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var returnUrl = Navigation!.ToBaseRelativePath(e.Location);
        if (returnUrl != "organizationSetting")
        {
            Dispatcher.Dispatch(new ClearOrganizationStateAction());
        }
    }
    void IDisposable.Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }
}
