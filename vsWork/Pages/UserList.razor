@page "/userList"
@inherits vsWork.Shared.BasePage
@implements IDisposable
@using Fluxor
@using vsWork.Stores
@using vsWork.Shared
@using BlazorPagination
@if (UserSettingState.Value.Loading)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataGrid TItem="User"
              Data=@(UserSettingState.Value.UserList.Skip((currentPage - 1)*maxRow).Take(maxRow).ToArray())
              @bind-SelectedRow="@_selectedData" PageSize=@maxRow Sortable="false">
        <DataGridColumn TItem="User" Field="@nameof(User.UserId)" Caption="ユーザーID" Sortable="false" />
        <DataGridColumn TItem="User" Field="@nameof(User.UserName)" Caption="ユーザー名称" Editable="true" />
    </DataGrid>

    <BlazorPager CurrentPage="@currentPage"
                 PageCount="@pageCount"
                 OnPageChanged="(async e => { OnPageChanged(e);})"
                 ShowFirstLast="true"
                 ShowPageNumbers="true"
                 VisiblePages="5"
                 FirstText="&laquo;"
                 LastText="&raquo;"
                 NextText="&rsaquo;"
                 PreviousText="&lsaquo;" />

    <Button Color="Color.Primary" @onclick="@(OnClickAddButton)">新規登録</Button>
    <Button Color="Color.Secondary" Disabled="@(_selectedData == null)" @onclick="@(OnClickUpdateButton)">更新</Button>
    <Button Color="Color.Danger" Disabled="@(_selectedData == null)" @onclick="@(OnClickDeleteButton)">削除</Button>
}
@code {
    // TODO:ページネーションで末尾のページネーションコンポーネントの位置がずれる
    // TODO:ページコンポーネントとボタンを横並びにしたい
    [Inject]
    private IState<UserSettingState> UserSettingState { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private const int maxRow = 7;
    private int pageCount;
    private int currentPage = 1;
    private User _selectedData;


    protected override void OnInitialized()
    {
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();
    }
    protected override void OnParametersSet()
    {
        if (UserSettingState.Value.Initialized == false)
        {
            Dispatcher.Dispatch(new LoadUsersAction());
        }
        pageCount = (int)Math.Ceiling(((UserSettingState.Value.UserList.Length - 1) / maxRow) + 0.5);
    }
    private void OnPageChanged(int e)
    {
        currentPage = e;
        StateHasChanged();
    }
    private async Task OnClickAddButton()
    {
        Dispatcher.Dispatch(new UserSettingBeginAction(new User(), SettingMode.Add));
    }
    private async Task OnClickUpdateButton()
    {
        Dispatcher.Dispatch(new UserSettingBeginAction(_selectedData, SettingMode.Update));
    }
    private async Task OnClickDeleteButton()
    {
        var parameters = new ModalParameters();
        var options = new ModalOptions { HideCloseButton = true };
        if ((CurrentState.Value.User.Rank == User.RankType.SystemAdmin) &
        (_selectedData.Rank == User.RankType.SystemAdmin) &
        (UserSettingState.Value.UserList.Where(p => p.Rank == User.RankType.SystemAdmin).Count() < 2))
        {
            parameters.Add(nameof(ModalDisplay.Message), "システム管理者が残り１名です" + Environment.NewLine + "削除できません");
            parameters.Add(nameof(ModalDisplay.DispType), ModalDisplay.EnumDispType.Confirm);
            var messageForm = Modal.Show<ModalDisplay>("確認", parameters, options);
        }
        else
        {
            parameters.Add(nameof(ModalDisplay.Message), _selectedData.UserName + "を削除しますか？");
            parameters.Add(nameof(ModalDisplay.DispType), ModalDisplay.EnumDispType.YesOrNo);
            var messageForm = Modal.Show<ModalDisplay>("確認", parameters, options);
            var result = await messageForm.Result;
            if (!result.Cancelled)
            {
                Dispatcher.Dispatch(new UserSettingBeginAction(_selectedData, SettingMode.Delete));
            }
        }
    }
    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var returnUrl = Navigation!.ToBaseRelativePath(e.Location);
        if (returnUrl != "userSetting" & returnUrl != "userList")
        {
            Dispatcher.Dispatch(new ClearUserStateAction());
        }
    }
    void IDisposable.Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }
}
