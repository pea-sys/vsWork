@page "/userSetting"
@inherits vsWork.Shared.BasePage
@implements IDisposable
@using Fluxor
@using vsWork.Stores
@using vsWork.Shared

<Container Fluid="true">
    <EditForm Model="@settingData" OnValidSubmit="OnClickRegist">
        <FluentValidationValidator @ref="fluentValidationValidator " />
        <DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
        <div class="form-group">
            <label for="id">UserID(3文字以上100文字以下)</label>
            <input type="text" name="id" @bind-value="settingData.UserId" disabled=@(UserSettingState.Value.Mode==SettingMode.Update) maxlength="100" class="form-control" />
        </div>
        <div class="form-group">
            <label for="id">UserName(3文字以上100文字以下)</label>
            <input type="text" name="id" @bind-value="settingData.UserName" maxlength="100" class="form-control" />
        </div>
        <div class="form-group">
            <label for="pass">Password(3文字以上100文字以下)</label>
            <input type="password" name="pass" @bind-value="settingData.Password" maxlength="100" class="form-control" />
        </div>

        @if (CurrentState.Value.User.Rank == User.RankType.SystemAdmin)
        {
            <div class="form-group">
                <label for="rating">組織名称</label>
                <InputSelect class="form-control" @bind-Value="selectedOrganization.OrganizationName">
                    @foreach (Organization item in _organizationList)
                        {
                        <option>@(item.OrganizationName)</option>
                        }
                </InputSelect>
            </div>
        }

        <button class="btn btn-primary" type="submit">登録</button>

    </EditForm>
</Container>

@code {
    [Inject]
    private IState<UserSettingState> UserSettingState { get; set; }

    private User settingData = new User();
    private List<Organization> _organizationList = new List<Organization>();
    private Organization selectedOrganization = new Organization();

    protected override void OnInitialized()
    {
        settingData = UserSettingState.Value.SelectedUser;
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();
    }
    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var returnUrl = Navigation!.ToBaseRelativePath(e.Location);
        if (returnUrl!= "userList")
        {
            Dispatcher.Dispatch(new UserSettingStateInitializeAction());
        }
    }
    private async Task OnClickRegist()
    {
        Dispatcher.Dispatch(new UserSettingAction(settingData));
    }
    void IDisposable.Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }
}
