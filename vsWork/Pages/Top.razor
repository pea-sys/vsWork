@page "/top"
@inherits vsWork.Shared.BasePage
@using vsWork.Stores
<div class="col-md-12 text-center">
    <div>
        <vsWork.Shared.Clock />
    </div>

    <button class="btn btn-primary" @onclick="PunchIn">出勤</button>
    <button class="btn btn-secondary" @onclick="PunchOut">退勤</button>
</div>

@code {
    [Inject]
    private IState<CurrentUserState> CurrentUserState{ get; set; }
    [CascadingParameter]
    public IModalService Modal { get; set; }

    /// <summary>
    /// 出勤打刻
    /// </summary>
    private async Task PunchIn()
    {
        if (string.IsNullOrEmpty(CurrentUserState.Value.User.UserId))
        {
            return;
        }

        if (CurrentUserState.Value.UserState.State != UserState.StateType.PunchIn)
        {
            Dispatcher.Dispatch(new PunchInAction());

            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalDisplay.Message), "出勤打刻しました" + Environment.NewLine + CurrentUserState.Value.UserState.TimeStamp.ToLongTimeString());
            parameters.Add(nameof(ModalDisplay.DispType), ModalDisplay.EnumDispType.Confirm);
            var options = new ModalOptions { HideCloseButton = true };
            var messageForm = Modal.Show<ModalDisplay>("確認", parameters, options);
            var result = await messageForm.Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalDisplay.Message), "出勤打刻済みです" + Environment.NewLine + CurrentUserState.Value.UserState.TimeStamp.ToLongTimeString());
            parameters.Add(nameof(ModalDisplay.DispType), ModalDisplay.EnumDispType.Confirm);
            var options = new ModalOptions { HideCloseButton = true };
            var messageForm = Modal.Show<ModalDisplay>("エラー", parameters, options);
            var result = await messageForm.Result;
        }
    }
    /// <summary>
    /// 退勤打刻
    /// </summary>
    private async Task PunchOut()
    {
        if (CurrentUserState.Value.UserState.State == UserState.StateType.PunchIn)
        {
            Dispatcher.Dispatch(new PunchOutAction());

            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalDisplay.Message), "退勤打刻しました");
            parameters.Add(nameof(ModalDisplay.DispType), ModalDisplay.EnumDispType.Confirm);
            var options = new ModalOptions { HideCloseButton = true };
            var messageForm = Modal.Show<ModalDisplay>("確認", parameters, options);
            var result = await messageForm.Result;
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalDisplay.Message), "退勤打刻済みです");
            parameters.Add(nameof(ModalDisplay.DispType), ModalDisplay.EnumDispType.Confirm);
            var options = new ModalOptions { HideCloseButton = true };
            var messageForm = Modal.Show<ModalDisplay>("エラー", parameters, options);
            var result = await messageForm.Result;
        }
    }
}
