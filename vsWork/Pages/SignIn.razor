@page "/"
@using Microsoft.AspNetCore.Components.Server.Circuits;
<EditForm Model="@authUser" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator @ref="fluentValidationValidator " />
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="id">UserID</label>
        <input type="text" name="id" @bind-value="authUser.UserId" maxlength="100" class="form-control" />
    </div>
    <div class="form-group">
        <label for="pass">Password</label>
        <input type="password" name="pass" @bind-value="authUser.Password" maxlength="100" class="form-control" />
    </div>
    <div class="form-group">
        <input type="checkbox" name="isChache" @bind-value="isCache">
        <label for="isChache">ログイン状態を維持</label>
    </div>
    <button class="btn btn-primary" type="submit">ログイン</button>
</EditForm>

@code{
    [Inject]
    protected NavigationManager NavManager { get; set; }
    [Inject]
    protected IRepository<User, string> UserRepo { get; set; }
    [Inject]
    protected IRepository<Session, string> SessionRepo { get; set; }
    [Inject]
    protected CircuitHandler CHService { get; set; }
    [Inject]
    protected IUserOnlineService UserOnlineService { get; set; }

    private FluentValidationValidator fluentValidationValidator;

    private User authUser = new User();
    private bool isCache = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
#if DEBUG
        UserRepo.CreateTable();
        UserRepo.Add(new User { UserId = "helloworld", Password = "helloworld" });
        UserRepo.Update(new User { UserId = "helloworld", Password = "helloworld" });
        UserRepo.Add(new User { UserId = "apple", Password = "apple" });


        SessionRepo.CreateTable();
#endif
        // 現在のセッションにおけるユーザ情報をクリアする
    }
    /// <summary>
    /// サブミット押下処理
    /// </summary>
    private async Task OnValidSubmit()
    {
        UserOnlineService.Connect(((CircuitHandlerService)CHService).CircuitId, authUser, (SessionRepository)SessionRepo);
        NavManager.NavigateTo("top");
    }
}
