@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using Blazored.Toast.Services
@using vsWork.Stores

@inject IToastService toastService

@code {
    protected override void OnInitialized()
    {
        SubscribeToAction<ConnectAction>(ShowConnectAction);
        SubscribeToAction<DisConnectAction>(ShowDisConnectAction);
        SubscribeToAction<SignInAction>(ShowSignInAction);
        SubscribeToAction<SignOutAction>(ShowSignOutAction);
        SubscribeToAction<PunchInAction>(ShowPunchInAction);
        SubscribeToAction<PunchOutAction>(ShowPunchOutAction);

        SubscribeToAction<LoadUsersSuccessAction>(ShowLoadUsersSuccessToast);
        SubscribeToAction<UserSettingSuccessAction>(ShowUserSettingSuccessToast);
        SubscribeToAction<UserSettingFailureAction>(ShowUserSettingFailureToast);

        SubscribeToAction<LoadOrganizationsSuccessAction>(ShowLoadOrganizationsSuccessToast);
        SubscribeToAction<OrganizationSettingSuccessAction>(ShowOrganizationSettingSuccessToast);
        SubscribeToAction<OrganizationSettingFailureAction>(ShowOrganizationSettingFailureToast);

        SubscribeToAction<LoadHolidaysSuccessAction>(ShowLoadHolidaySuccessToast);
        SubscribeToAction<HolidaySettingSuccessAction>(ShowHolidaySettingSuccessToast);
        SubscribeToAction<HolidaySettingFailureAction>(ShowHolidaySettingFailureToast);

        base.OnInitialized();
    }
    private void ShowConnectAction(ConnectAction action)
    {
        toastService.ShowInfo("Connect!");
    }
    private void ShowDisConnectAction(DisConnectAction action)
    {
        toastService.ShowError("DisConnect!");
    }
    private void ShowSignInAction(SignInAction action)
    {
        toastService.ShowInfo("SignIn!");
    }
    private void ShowSignOutAction(SignOutAction action)
    {
        toastService.ShowInfo("SignOut!");
    }
    private void ShowPunchInAction(PunchInAction action)
    {
        toastService.ShowInfo("PunchIn!");
    }
    private void ShowPunchOutAction(PunchOutAction action)
    {
        toastService.ShowInfo("PunchOut!");
    }
    private void ShowLoadUsersSuccessToast(LoadUsersSuccessAction action)
    {
        toastService.ShowSuccess("LoadUsers Success!");
    }
    private void ShowUserSettingSuccessToast(UserSettingSuccessAction action)
    {
        toastService.ShowSuccess("Setting Success!");
    }
    private void ShowUserSettingFailureToast(UserSettingFailureAction action)
    {
        toastService.ShowError("Setting Failure!");
    }

    private void ShowLoadOrganizationsSuccessToast(LoadOrganizationsSuccessAction action)
    {
        toastService.ShowSuccess("LoadOrganizations Success!");
    }
    private void ShowOrganizationSettingSuccessToast(OrganizationSettingSuccessAction action)
    {
        toastService.ShowSuccess("Setting Success!");
    }
    private void ShowOrganizationSettingFailureToast(OrganizationSettingFailureAction action)
    {
        toastService.ShowError("Setting Failure!");
    }

    private void ShowLoadHolidaySuccessToast(LoadHolidaysSuccessAction action)
    {
        toastService.ShowSuccess("LoadHolidays Success!");
    }
    private void ShowHolidaySettingSuccessToast(HolidaySettingSuccessAction action)
    {
        toastService.ShowSuccess("Setting Success!");
    }
    private void ShowHolidaySettingFailureToast(HolidaySettingFailureAction action)
    {
        toastService.ShowError("Setting Failure!");
    }
}
