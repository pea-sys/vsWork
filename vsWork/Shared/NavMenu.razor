@using Microsoft.AspNetCore.Components.Server.Circuits;
@implements IDisposable
@using vsWork.Stores

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">勤怠システム</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="userList">
                <span class="oi oi-list-rich" aria-hidden="true"></span> ユーザ登録(管理者権限)
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="organizationList">
                <span class="oi oi-list-rich" aria-hidden="true"></span> 組織登録(管理者権限)
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <a class="navbar-brand">@(CurrentState.Value.User.UserName) 状態:@(EnumTextAttribute.GetText(CurrentState.Value.UserState.State))</a>
            <button class="nav-link" @onclick="LogOut">
                ログアウト
            </button>
        </li>
    </ul>
</div>

@code {
    [Inject]
    protected IRepository<Session, string> sessionRepository { get; set; }
    [Inject]
    protected CircuitHandler circuitHandlerService { get; set; }
    [Inject]
    protected NavigationManager navigationManager { get; set; }
    [Inject]
    private IState<CurrentUserState> CurrentState { get; set; }
    [Inject]
    public IDispatcher Dispatcher { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        // 初回時にイベントハンドラに、イベントの紐づけ
        CurrentState.Value.StateChanged += OnUserStateChanged;
    }

    private void LogOut()
    {
        Dispatcher.Dispatch(new SignOutAction());
        navigationManager.NavigateTo("");

    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    void OnUserStateChanged(
        object sender, EventArgs e)
    {
        this.InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        // 閉じられるとき、イベントのリリース
        CurrentState.Value.StateChanged -= OnUserStateChanged;
    }
}
